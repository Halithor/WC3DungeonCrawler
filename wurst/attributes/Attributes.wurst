package Attributes

import public AttributeSystem_Globals
import public AttributeSystem
import HashMap

// Hero Level as a attribute
public constant ATR_HERO_LEVEL = new AttributeId(compiletime(ID_GEN_ATTR.next()))

// Bonus percentage of experience gained
public constant ATR_EXP_GAIN = new AttributeId(compiletime(ID_GEN_ATTR.next()))

// Healing 'dealt' increase and healing taken increase, as percentages
public constant ATR_HEAL_CASTER_BONUS = new AttributeId(compiletime(ID_GEN_ATTR.next()))
public constant ATR_HEAL_TARGET_BONUS = new AttributeId(compiletime(ID_GEN_ATTR.next()))

// Resistance to spell damage, both flat reduction and percentage
public constant ATR_DMG_RESIST_PHYSICAL = new AttributeId(compiletime(ID_GEN_ATTR.next()))
public constant ATR_DMG_RESIST_CURSED = new AttributeId(compiletime(ID_GEN_ATTR.next()))
public constant ATR_DMG_RESIST_FIRE = new AttributeId(compiletime(ID_GEN_ATTR.next()))
public constant ATR_DMG_RESIST_FROST = new AttributeId(compiletime(ID_GEN_ATTR.next()))
public constant ATR_DMG_RESIST_NATURAL = new AttributeId(compiletime(ID_GEN_ATTR.next()))
public constant ATR_DMG_RESIST_ARCANE = new AttributeId(compiletime(ID_GEN_ATTR.next()))

// Attribute gain per level, in tenths of a point :)
public constant ATR_STRENGTH_GAIN = new AttributeId(compiletime(ID_GEN_ATTR.next()))
public constant ATR_AGILITY_GAIN = new AttributeId(compiletime(ID_GEN_ATTR.next()))
public constant ATR_INTELLIGENCE_GAIN = new AttributeId(compiletime(ID_GEN_ATTR.next()))

public constant IterableMap<AttributeId, int> defaultHeroStats = new IterableMap<AttributeId, int>()
  ..put(ATR_LIFE_MAX_FLAT, 100)
  ..put(ATR_LIFE_REGEN_FLAT, 50)
  ..put(ATR_MANA_MAX_FLAT, 50)
  ..put(ATR_MANA_REGEN_FLAT, 50)
  ..put(ATR_ARMOR_FLAT, 0)
  ..put(ATR_ATK_CD_FLAT, 250) // 2.5 seconds
  ..put(ATR_ATK_DMG_FLAT, 2)
  ..put(ATR_ATK_DICE_FLAT, 1)
  ..put(ATR_ATK_DICE_SIDES_FLAT, 5)
  ..put(ATR_MOVESPEED_FLAT, 280)
  ..put(ATR_AGILITY_FLAT, 10)
  ..put(ATR_INTELLIGENCE_FLAT, 10)
  ..put(ATR_STRENGTH_FLAT, 10)
  ..put(ATR_PRIMARY_ATR, 1)
  