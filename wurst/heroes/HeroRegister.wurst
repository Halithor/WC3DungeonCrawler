package HeroRegister
import HeroRace
import HeroClass
import HashList
import UnitObjEditing
import CombatTypes
import Soundsets
import HashMap
import Attributes
import HeroAttrs
import HeroGlobals
import Buildings
import ObjectIds
import HeroUtils
import initlater HeroDefinitions

public tuple combat(DamageType damageType, real cooldown, int baseDamage, int diceCount, 
    int diceSides, int range, DefenseType defenseType)
public tuple visuals(string icon, string model, real scale, string voice)

public HashList<HeroEntry> heroEntries = new HashList<HeroEntry>()

public class HeroEntry
  int unitId

  HeroRace rac
  HeroClass clas
  HeroAttribute primary

  combat combat
  visuals visuals

  construct(int unitId, HeroRace rac, HeroClass clas, HeroAttribute primary, combat combat, visuals visuals)
    this.unitId = unitId
    this.rac = rac
    this.clas = clas
    this.primary = primary
    this.combat = combat
    this.visuals = visuals

  function getName() returns string
    return this.rac.name + " " + this.clas.name
  
  function getAttrs() returns HeroAttributes
    return rac.getAttributes().add(clas.getAttributes())
  
  function getDescription() returns string
    let attrs = getAttrs()
    return "" +
        "Attack Type: " + combat.damageType.toString() + "\n" +
        "Attack Range: " + (combat.range > 128 ? combat.range.toString() : "Melee") + "\n" +
        "Defense Type: " + combat.defenseType.toString() + "\n" +
        "Armor: " + attrs.armor.toString() + "\n" +
        "Health: " + attrs.health.toString() + "\n" +
        "Mana: " + attrs.mana.toString() + "\n" +
        (primary == HeroAttribute.Str ? "|cffffcc00" : "") + "Strength|r: " + 
        attrs.strength.toString() + " + " + attrs.agilityGain.toString() + "\n" +
        (primary == HeroAttribute.Agi ? "|cffffcc00" : "") + "Agility|r: " + 
        attrs.agility.toString() + " + " + attrs.agilityGain.toString() + "\n" +
        (primary == HeroAttribute.Int ? "|cffffcc00" : "") + "Intelligence|r: " + 
        attrs.intelligence.toString() + " + " + attrs.agilityGain.toString() + "\n"

  // Define the HeroDefiniton for this hero
  function createHeroDefintion()
    let def = getCleanHeroDef(unitId)
      ..setSelectionScale(1)
      ..setIconGameInterface(visuals.icon)
      ..setModelFile(visuals.model)
      ..setScalingValue(visuals.scale)
      ..setAttack1AttackType(combat.damageType.toCode())
      ..setArmorType(combat.defenseType.toCode())
      ..setDefenseBase(0)
      ..setCollisionSize(31.0)
      ..setUnitSoundSet(visuals.voice)
      ..setPrimaryAttribute(primary.toCode())
      ..setName(getName())
      ..setTooltipBasic("Select " + getName())
      ..setDescription(getDescription())
      ..setTooltipExtended(getDescription())
      ..setStockStartDelay(5)
      ..setStockMaximum(1)
      ..setStockReplenishInterval(99999)
      ..setGoldCost(0)
      ..setLumberCost(0)
      ..setFoodCost(0)
      ..setButtonPositionX(0)
      ..setButtonPositionY(0)
    getAttrs().applyToHeroDef(def)

  // Create the starting attributes set for this hero based on the member variables of this class.
  function getStartingHeroStats() returns IterableMap<AttributeId, int>
    let attrs = getAttrs()
    return new IterableMap<AttributeId, int>()
    ..put(ATR_LIFE_MAX_FLAT, attrs.health)
    ..put(ATR_LIFE_REGEN_FLAT, 0)
    ..put(ATR_MANA_MAX_FLAT, attrs.mana)
    ..put(ATR_MANA_REGEN_FLAT, 0)
    ..put(ATR_ARMOR_FLAT, attrs.armor)
    ..put(ATR_ATK_CD_FLAT, (combat.cooldown * 100.0).round()) // 2.5 seconds
    ..put(ATR_ATK_DMG_FLAT, combat.baseDamage)
    ..put(ATR_ATK_DICE_FLAT, combat.diceCount)
    ..put(ATR_ATK_DICE_SIDES_FLAT, combat.diceSides)
    ..put(ATR_MOVESPEED_FLAT, 290)
    ..put(ATR_AGILITY_FLAT, attrs.agility)
    ..put(ATR_AGILITY_GAIN, (attrs.agilityGain * 10).round())
    ..put(ATR_INTELLIGENCE_FLAT, attrs.intelligence)
    ..put(ATR_INTELLIGENCE_GAIN, (attrs.intelligenceGain * 10).round())
    ..put(ATR_STRENGTH_FLAT, attrs.strength)
    ..put(ATR_STRENGTH_GAIN, (attrs.strengthGain * 10).round())
    ..put(ATR_PRIMARY_ATR, primary.toNumeric())

public function registerHero(HeroEntry entry)
  heroEntries.add(entry)
  entry.createHeroDefintion()
      
@compiletime
function registerHeros()
  defineHeroes()
  defineSelectionBuildings()

function defineCleanSelectionBuilding(int newId, string name, string unitsSold) returns BuildingDefinition
  return new BuildingDefinition(newId, 'hhou')
    ..setNormalAbilities("Ane2,Avul")
    ..setModelFile(Buildings.tavern1)
    ..setUnitSoundSet(Soundsets.tavern)
    ..setScalingValue(0.5)
    ..setSelectionScale(-1.0)
    ..setName(name)
    ..setUnitsSold(unitsSold)
    ..setPlacementRequires("")

function defineClassSelectionUnits(HeroClass clas)
  string unitsSold = ""
  for entry in heroEntries
    if entry.clas.name == clas.name
      unitsSold += entry.unitId.toRawCode() + ","
  unitsSold = unitsSold.rtrim(",")
  print("class " + clas.name + " has \'" + unitsSold + "\' for sale.")

  defineCleanSelectionBuilding(clas.uidSelectionBuilding, clas.name + " -> Select race...", 
      unitsSold)

  // define the selection unit
  new UnitDefinition(clas.uidSelectableUnit, 'hfoo')
      ..setFoodCost(0)
      ..setFoodCost(0)
      ..setGoldCost(0)
      ..setLumberCost(0)
      ..setStockMaximum(1)
      ..setStockReplenishInterval(0)
      ..setStockStartDelay(5)
      ..setIconGameInterface(clas.icon)
      ..setTooltipBasic("Pick " + clas.name + " class")
      ..setTooltipExtended("...")
      ..setDescription("...") // TODO

function defineSelectionBuildings()
  string unitsSold = ""
  for clas in classes 
    defineClassSelectionUnits(clas)
    unitsSold += clas.uidSelectableUnit.toRawCode() + ","
  unitsSold = unitsSold.rtrim(",")
  defineCleanSelectionBuilding(kUID_CLASS_SELECTION, "Select Class", unitsSold)
  
// Call define heroes at init to populate the structure
init 
  defineHeroes()