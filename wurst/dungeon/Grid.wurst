package Grid
import MapConstants
import Map

// function setGateState(destructable gate, bool isOpen)
//   if isOpen
//     ModifyGateBJ(bj_GATEOPERATION_OPEN, gate)
//     // remove the gates for now, since they don't do anything for us existing.
//     // RemoveDestructable(gate)
//   else
//     ModifyGateBJ(bj_GATEOPERATION_CLOSE, gate)

// A single cell in the map grid.
public class GridCell
  coord site
  vec2 center
  rect area

  texttag text

  destructable gate_north
  destructable gate_south
  destructable gate_east
  destructable gate_west

  construct(coord site)
    this.site = site
    this.center = MAP_CENTER + 
        vec2(((this.site.x - 5.0) * ROOM_SIZE) + ROOM_HALF, 
        ((this.site.y - 5.0) * ROOM_SIZE) + ROOM_HALF)
    this.area = Rect(center.x - ROOM_HALF, center.y - ROOM_HALF, 
        center.x + ROOM_HALF, center.y + ROOM_HALF)
    // createTTEx(center.toVec3(), "(" + this.site.x.toString() + ", " + this.site.y.toString() + ")", 14)

  ondestroy
    area.remove()
    text.destr()
    if gate_north != null
      gate_north.remove()
    if gate_south != null
      gate_south.remove()
    if gate_east != null
      gate_east.remove()
    if gate_west != null
      gate_west.remove()

  function represent(MapRoom room, bool isNorthEdge, bool isEastEdge)
    // Create only south and west gates. Let adjacent rooms handle the other gates.
    if site.y > 0 and not room.isSouthOpen 
      gate_south = createDestructable(kDID_WALL_HORZ, center - vec2(0, ROOM_HALF), (270).fromDeg(), 
          0.8, 0)
    if site.x > 0 and not room.isWestOpen
      gate_west = createDestructable(kDID_WALL_VERT, center - vec2(ROOM_HALF, 0), (270).fromDeg(), 
          0.8, 0)
    // If this is the edge of the map, also needs to have gates created.
    if isNorthEdge and site.y < MAP_ROWS - 1
      gate_north = createDestructable(kDID_WALL_HORZ, center + vec2(0, ROOM_HALF), (270).fromDeg(), 
          0.8, 0)
    if isEastEdge and site.x < MAP_COLS - 1
      gate_east = createDestructable(kDID_WALL_VERT, center + vec2(ROOM_HALF, 0), (270).fromDeg(), 
          0.8, 0)
    // setGateState(gate_north, room.isNorthOpen)
    // setGateState(gate_south, room.isSouthOpen)
    // setGateState(gate_east, room.isEastOpen)
    // setGateState(gate_west, room.isWestOpen)
    text = createTTEx(center.toVec3(), room.toString(), 14)
 


/** This class is the physical grid of rooms. Used to change the state of doors and the like */
public class Grid
  private GridCell array[100] grid

  construct()
    for y = 0 to MAP_ROWS - 1
      for x = 0 to MAP_COLS - 1
        grid[(y * MAP_COLS) + x] =  new GridCell(coord(x, y))

  ondestroy
    for y = 0 to MAP_ROWS - 1
      for x = 0 to MAP_COLS - 1
        destroy grid[(y * MAP_COLS) + x]
        grid[(y * MAP_COLS) + x] = null
    
  
  function getGridCell(coord point) returns GridCell
    return getGridCell(point.x, point.y)
  
  function getGridCell(int x, int y) returns GridCell
    return grid[(y * MAP_COLS) + x]

  // Given a position figure out the grid coordinates
  function getContainingGridCell(vec2 pos) returns GridCell
    let x = ((pos.x / ROOM_SIZE) + (MAP_COLS / 2)).floor()
    let y = ((pos.y / ROOM_SIZE) + (MAP_ROWS / 2)).floor()
    return getGridCell(x, y)

  // Represent the provided map in this grid.
  function applyMapToGrid(Map map)
    print("ApplyingMap: Start@" + map.start.toString() + " | Finish@" + map.finish.toString())
    for y = 0 to map.size.y - 1
      for x = 0 to map.size.x - 1
        getGridCell(x,y).represent(map.getRoom(coord(x, y)), y == map.size.y - 1, x == map.size.x - 1)
    