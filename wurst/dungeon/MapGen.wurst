/** This is the package the contains the logic of generating a Map */
package MapGen

import MapConstants
import HashSet
import Map


function Dir.openDoor(MapRoom room)
  switch this
    case North
      room.isNorthOpen = true
    case South
      room.isSouthOpen = true
    case West
      room.isWestOpen = true
    case East
      room.isEastOpen = true

function addValidDoor(Map map, MapRoom room, HashSet<Door> doors, Dir dir)
  let point = room.point + dir.toOffset()
  let inMap = map.isPointInMap(point)
  let isUnexplored = inMap ? map.getRoom(point).status == Status.Unexplored : false
  Log.trace("AddValidDoor of " + point.toString() + " | inMap: " + inMap.toString() + 
      " | isUnexplored: " + isUnexplored.toString())
  if inMap and isUnexplored
    Log.trace("Valid door found")
    doors.add(new Door(room, dir))

function addAllValidDoors(Map map, MapRoom room, HashSet<Door> doors)
  Log.trace("Adding valid doors")
  addValidDoor(map, room, doors, Dir.North)
  addValidDoor(map, room, doors, Dir.South)
  addValidDoor(map, room, doors, Dir.East)
  addValidDoor(map, room, doors, Dir.West)

function buildDoorSet(Map map, HashSet<MapRoom> rooms) returns HashSet<Door>
  let doors = new HashSet<Door>()
  for room in rooms
    addAllValidDoors(map, room, doors)
  return doors

function openADoor(Map map, HashSet<MapRoom> rooms, HashSet<Door> doors, Status st)
  // if there are available spaces left
  if doors.size() > 0
    // pick a door from the set
    let door = doors.get(GetRandomInt(0, doors.size() - 1))
    // open the door
    // mark new room as explored.
    let room = map.getRoom(door.source.point + door.dir.toOffset())
    room.status = st
    room.distance = door.source.distance + 1
    rooms.add(room)
    door.dir.openDoor(door.source)
    door.dir.opposite().openDoor(room)
  else
    Log.trace("No doors to open")

/** Returns the total distance of two rooms if they are in different halves. */
function getRoomCombinedDitance(RoomPair pair) returns int
  var ret = -1
  if pair.fst.status != pair.scd.status
    // They're in different sets, return the distance.
    ret = pair.fst.distance + pair.scd.distance
  return ret

function testRoomPair(int bestDist, HashSet<RoomPair> pairs, RoomPair testPair) returns int
  let dist = getRoomCombinedDitance(testPair) 
  var retDist = bestDist
  // clear and reset
  if dist > bestDist
    retDist = dist
    for pair in pairs
      destroy pair
    pairs.clear()
  // add to the pairs
  if dist == retDist
    pairs.add(testPair)
  return retDist

function internalGenMap(Map map)
  Log.trace("Generating map")
  // pick a start
  map.start = map.getRandomPoint()
  map.getRoom(map.start).isStart = true
  map.getRoom(map.start).status = Status.Start
  // pick an end
  map.finish = map.start
  while map.finish == map.start
    map.finish = map.getRandomPoint()
  map.getRoom(map.finish).isFinish = true
  map.getRoom(map.finish).status = Status.Finish
  // create sets of rooms
  let startRooms = new HashSet<MapRoom>..add(map.getRoom(map.start))
  let finishRooms = new HashSet<MapRoom>..add(map.getRoom(map.finish))
  // create the sets of doors going to unexplored rooms
  var startDoors = buildDoorSet(map, startRooms)
  var finishDoors = buildDoorSet(map, finishRooms)
  // alternativng sets, do the following until no more rooms are unexplored.
  Status last = Status.Unexplored
  while startRooms.size() + finishRooms.size() < map.size.x * map.size.y
    last = last == Status.Start ? Status.Finish : Status.Start
    Log.trace("Opening: " + (last == Status.Start ? "Start" : "Finish") + " | " + 
      startRooms.size().toString() + "+" + finishRooms.size().toString() + "<" + 
      (map.size.x * map.size.y).toString())
    if last == Status.Start
      openADoor(map, startRooms, startDoors, last)
    else
      openADoor(map, finishRooms, finishDoors, last)
    // update set with new doors and remove any that exist
    startDoors = buildDoorSet(map, startRooms)
    // update other set to remove any doors going into this room.
    finishDoors = buildDoorSet(map, finishRooms)

  // compile pairs of adjacent rooms, one from each set, to find the greatest distance.
  Log.trace("Connecting halves")
  var bestDist = -1
  let pairs = new HashSet<RoomPair>()
  for y = 0 to map.size.y - 1
    for x = 0 to map.size.x - 1
      if y > 0 
        // down
        let testPair = new RoomPair(map.getRoom(coord(x, y)), map.getRoom(coord(x, y - 1)))
        bestDist = testRoomPair(bestDist, pairs, testPair)
      if x > 0 
        // left
        let testPair = new RoomPair(map.getRoom(coord(x, y)), map.getRoom(coord(x - 1, y)))
        bestDist = testRoomPair(bestDist, pairs, testPair)
  // Pairs now contains all equally greatest length pairs. Pick one randomly and open
  Log.trace("Found " + pairs.size().toString() + " pairs of rooms with distance " + 
      bestDist.toString())
  let connection = pairs.get(GetRandomInt(0, pairs.size() -1))
  connection.getDir().openDoor(connection.fst)
  connection.getDir().opposite().openDoor(connection.scd)
  
  // OPTIONAL: reposition the finish to be farthest away from it's current location, in it's set, 
  // not on the start path.
  
public class MapGenerator
  Map map

  construct(Map map)
    this.map = map

  function generateMap()
    // Todo refactor map generation into a OO style
    internalGenMap(map)